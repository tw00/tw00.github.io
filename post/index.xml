<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Thomas Weustenfeld</title><link>https://tw00.dev/post/</link><description>Recent content in Posts on Thomas Weustenfeld</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 13 Apr 2024 00:19:27 -0400</lastBuildDate><atom:link href="https://tw00.dev/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Atomic Habits: 3 Key Takeaways</title><link>https://tw00.dev/post/books/atomic-habits/</link><pubDate>Sat, 13 Apr 2024 00:19:27 -0400</pubDate><guid>https://tw00.dev/post/books/atomic-habits/</guid><description>Atomic Habits by James Clear offers practical strategies for creating lasting change through the power of small, consistent actions. Here are my top three takeaways from the book:
1. Systems over Goals &amp;ldquo;You do not rise to the level of your goals. You fall to the level of your systems.&amp;rdquo;
The author argues that focusing on systems and processes is more crucial than pursuing goals for lasting change. While the 1% rule (improving by 1% daily leads to a 38x improvement over a year) may seem oversimplified, prioritizing systems deeply resonates with me.</description></item><item><title>15 ways to style variants when using CSS-in-JS</title><link>https://tw00.dev/post/css-tips/styled-components/</link><pubDate>Sat, 12 Mar 2022 00:19:27 -0400</pubDate><guid>https://tw00.dev/post/css-tips/styled-components/</guid><description>I recently had an interesting discussion about CSS modules vs. CSS-in-JS and more specifically Emotion. We&amp;rsquo;ve been working on a codebase that uses CSS modules for a while now, and we&amp;rsquo;ve certainly come up with lots of patterns that make it easy to reason about CSS and keep it maintanble at scale. One of the central ideas are variants. For example we would create a base card component of certain color, size, shape and even hove state, but it would also have an optional variant property that would completly change the card&amp;rsquo;s appearance.</description></item><item><title>Getting high on Component-Based Deployments (CBD)</title><link>https://tw00.dev/post/component-based-deployment/</link><pubDate>Tue, 08 Feb 2022 02:14:19 +0000</pubDate><guid>https://tw00.dev/post/component-based-deployment/</guid><description>Disclaimer: This article talks about React to examplify the concepts. It doesn&amp;rsquo;t mean that this couldn&amp;rsquo;t be done with any other framework.
Today most CI systems for React applications looks something like this: Push code, merge code, install dependencies, run tests, create container, install dependencies again, deploy container to fresh nodes, tear down old nodes. etc.
But what if we could skip all these steps? What if we could just deploy a React component directly?</description></item><item><title>COVID-19 Simulator</title><link>https://tw00.dev/post/covid/</link><pubDate>Tue, 17 Mar 2020 10:38:55 +0200</pubDate><guid>https://tw00.dev/post/covid/</guid><description> let root = document.getElementById('exp-09').shadowRoot; let container = root.querySelector('.covid-sim'); container.style.margin = "0";</description></item><item><title>Announcing heliosRX</title><link>https://tw00.dev/post/heliosrx/annoucement/</link><pubDate>Mon, 03 Feb 2020 00:11:00 -0400</pubDate><guid>https://tw00.dev/post/heliosrx/annoucement/</guid><description>The future of the web is real-time. With Firebase Realtime Database Google offers a great product to write real-time web applications without the hassle of setting up an infrastructure yourself. Simply create a project and within minutes you will have your backend up and running and can start developing.
While getting started with Firebase is easy, you&amp;rsquo;ll soon run into some problems as your application is becoming increasingly more complex:</description></item><item><title>Solving Optimization Problems with Chemotaxis</title><link>https://tw00.dev/post/other/chemoxtaxis/</link><pubDate>Sun, 12 Jan 2020 00:19:27 -0400</pubDate><guid>https://tw00.dev/post/other/chemoxtaxis/</guid><description>When I started my career as a control engineer, a very wise man once told me a little trick, how to solve almost any real-life optimization problem with an algorithm that is so simple that it just takes 6 lines of code and you can remember it for the rest of your life once you understand how it works.
I&amp;rsquo;ve since passed on this wisdom to almost all students I supervised and I find it so valuable that I will share it here.</description></item><item><title>JS: The world's smallest logging library</title><link>https://tw00.dev/post/js-tips/js-tips-01-console-log/</link><pubDate>Mon, 04 Nov 2019 00:19:27 -0400</pubDate><guid>https://tw00.dev/post/js-tips/js-tips-01-console-log/</guid><description>Real pro&amp;rsquo;s debug with console.log ;-) So let&amp;rsquo;s build a the world&amp;rsquo;s smallest logging library. It is called picolog or plog for short as has ZERO dependencies.
// picolog.js export default function plog ( ctx, out = console.log ) { return ctx ? (...args) =&amp;gt; out(&amp;#39;[&amp;#39; + ctx + &amp;#39;]&amp;#39;, ...args) : () =&amp;gt; {}; } import plog from &amp;#39;@picolog&amp;#39; const log = plog(&amp;#39;foobar&amp;#39;); // create a logger with context &amp;#39;foobar&amp;#39; const log = plog(false); // create a disabled logger const log = plog(!</description></item></channel></rss>